@page "/"

@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable

<h3>Visual Binary Analysis</h3>

<div class="header">
    <div @ref="fileDropContainer" class="file-drop-zone @HoverClass" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
        <InputFile OnChange="@OnChange" @ref="inputFile" multiple />
    </div>
        <div class="key">
            <div class="key-item">
                <div class="color-display zero"></div>
                <div class="color-label">0x000</div>
            </div>

            <div class="key-item">
                <div class="color-display low"></div>
                <div class="color-label">Low</div>
            </div>

            <div class="key-item">
                <div class="color-display ascii"></div>
                <div class="color-label">ASCII</div>
            </div>

            <div class="key-item">
                <div class="color-display high"></div>
                <div class="color-label">High</div>
            </div>

            <div class="key-item">
                <div class="color-display max"></div>
                <div class="color-label">0xfff</div>
            </div>

        </div>
</div>
<div class="error-message-container">
    <p>@ErrorMessage</p>
</div>
@if (fileData.Bytes != null)
{
    <div class="raw-bytes-view">
        <div class="bytes-view">
            <div class="byte-counts">
                @for (int i = 0; i < fileData.Hex.Count; i += 16)
                {
                    <span class="byte-count">
                        @i.ToString().PadLeft(8, '0')
                    </span>
                }
            </div>
            <div class="hex-bytes-view">
                @foreach (var (h, i) in fileData.Hex.Zip(Enumerable.Range(0, fileData.Hex.Count)))
                {
                    <span class="hex-byte" id="hex-@i" onmouseover="@(() => OnHexHover(i))" onmouseleave="@(() => OnHexLeave(i))" style="opacity: @GetOpacity(h)">
                        @h
                    </span>
                }
            </div>
            <div class="text-bytes-view">
                @foreach (var (c, i) in fileData.Text.Zip(Enumerable.Range(0, fileData.Text.Length)))
                {
                    <span class="text-byte" id="text-@i"  onmouseover="@(() => OnTextHover(i))" onmouseleave="@(() => OnTextLeave(i))">
                        @c
                    </span>
                }
            </div>
        </div>

        <div class="bytes-map">
            @foreach (var (b, i) in fileData.Bytes.Zip(Enumerable.Range(0, fileData.Bytes.Length)))
            {
                <div class="byte-map-cell @(b == 0 ? "none" : b >= 1 && b <= 31 ? "low" : b >= 32 && b <= 127 ? "ascii" : b > 127 && b <= 255 ? "high" : "max")" id="byte-@i"></div>

            }
        </div>
    </div>
}
